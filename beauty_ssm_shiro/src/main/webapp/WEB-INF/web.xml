<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
	http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <!-- Spring相关配置文件(通用上下文，父容器，一般用来加载除web层的其他bean) -->
    <!-- 支持多个上下文（在多上下文的情况下，如果同一个bean被定义两次，后面一个优先） -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:spring/spring-service.xml,
            classpath:spring/spring-dao.xml,
            classpath:spring/spring-quartz.xml,
            classpath:spring/spring-redis.xml,
            classpath:spring/spring-shiro.xml,
            classpath:spring/spring-cache.xml,
            classpath:spring/spring-aop.xml
        </param-value>
    </context-param>

    <!-- 防止发生java.beans.Introspector内存泄露,应将它配置在ContextLoaderListener的前面 -->
    <!-- JDK中的java.beans.Introspector类的用途是发现Java类是否符合JavaBean规范  -->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>

    <!-- 实例化Spring容器 -->
    <!-- 应用启动时,该监听器被执行,它会读取Spring相关配置文件,其默认会到WEB-INF中查找applicationContext.xml -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- 可以使用RequestContextHolder.currentRequestAttributes() 获取到请求的attr -->
    <!--<listener>-->
    <!--<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>-->
    <!--</listener>-->

    <!-- 字符串过滤器 -->
    <filter>
        <filter-name>Set Character Encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <async-supported>true</async-supported>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>Set Character Encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 配置Shiro过滤器,先让Shiro过滤系统接收到的请求 -->
    <!-- 这里filter-name必须对应spring-shiro.xml中定义的<bean id="shiroFilter"/> -->
    <!-- 使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤 -->
    <!-- 通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的 -->
    <filter>
        <filter-name>shiroFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <async-supported>true</async-supported>
        <init-param>
            <!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 -->
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>

    <!--配置DispatcherServlet（WebMVC上下文，子容器） -->
    <!-- 注1：不要拦截/*,它会在转到jsp时再次拦截，导致404 -->
    <!-- 注2：拦截/，而不是*.do，实现restful风格，但是需要注意静态资源过滤 -->
    <servlet>
        <servlet-name>spring-mvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>
                classpath:spring/spring-web.xml,
                classpath:spring/spring-aop.xml <!-- controller层aop需要交给spring-mvc处理，因此此处再次加载 -->
            </param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>spring-mvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- druid -->
    <servlet>
        <servlet-name>DruidStatView</servlet-name>
        <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>DruidStatView</servlet-name>
        <url-pattern>/druid/*</url-pattern>
    </servlet-mapping>

    <!-- WebStatFilter用于采集web-jdbc关联监控的数据 -->
    <filter>
        <filter-name>DruidWebStatFilter</filter-name>
        <filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
        <init-param>
            <param-name>exclusions</param-name>
            <param-value>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>DruidWebStatFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- Session超时30分钟(零或负数表示会话永不超时) -->
    <session-config>
        <session-timeout>30</session-timeout>
    </session-config>

    <!--<error-page>-->
    <!--<error-code>405</error-code>-->
    <!--<location>/WEB-INF/error/405.jsp</location>-->
    <!--</error-page>-->
    <!--<error-page>-->
    <!--<error-code>404</error-code>-->
    <!--<location>/WEB-INF/error/404.jsp</location>-->
    <!--</error-page>-->
    <!--<error-page>-->
    <!--<error-code>500</error-code>-->
    <!--<location>/WEB-INF/error/500.jsp</location>-->
    <!--</error-page>-->
    <!--<error-page>-->
        <!--<exception-type>java.lang.Throwable</exception-type>-->
        <!--<location>/WEB-INF/error/500.jsp</location>-->
    <!--</error-page>-->

</web-app>