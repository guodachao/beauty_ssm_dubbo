<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd 
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
>
    <!--配置整合mybatis过程-->

    <!--1、配置数据库相关参数-->
    <context:property-placeholder location="classpath:resource.properties" ignore-unresolvable="true"/>

    <!--2.数据源druid -->
    <!-- master数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
			init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		 <!-- 配置初始化大小、最小、最大 -->
	    <property name="initialSize" value="${druid.pool.size.init}" />
	    <property name="minIdle" value="${druid.pool.size.min}" />
	    <property name="maxActive" value="${druid.pool.size.max}" />

	    <!-- 配置监控统计拦截的filters，wall用于防止sql注入，stat用于统计分析 -->
	    <property name="filters" value="wall,stat" />
	</bean>

    <!--&lt;!&ndash; slave 1 数据源 &ndash;&gt;-->
    <!--<bean id="slave1dataSource" class="com.alibaba.druid.pool.DruidDataSource"-->
          <!--init-method="init" destroy-method="close">-->
        <!--<property name="driverClassName" value="${jdbc.driverClassName}" />-->
        <!--<property name="url" value="${jdbc.url1}" />-->
        <!--<property name="username" value="${jdbc.username}" />-->
        <!--<property name="password" value="${jdbc.password}" />-->

        <!--&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
        <!--<property name="initialSize" value="${druid.pool.size.init}" />-->
        <!--<property name="minIdle" value="${druid.pool.size.min}" />-->
        <!--<property name="maxActive" value="${druid.pool.size.max}" />-->

        <!--&lt;!&ndash; 配置监控统计拦截的filters，wall用于防止sql注入，stat用于统计分析 &ndash;&gt;-->
        <!--<property name="filters" value="wall,stat" />-->
    <!--</bean>-->

    <!--&lt;!&ndash; slave 2 数据源 &ndash;&gt;-->
    <!--<bean id="slave2dataSource" class="com.alibaba.druid.pool.DruidDataSource"-->
          <!--init-method="init" destroy-method="close">-->
        <!--<property name="driverClassName" value="${jdbc.driverClassName}" />-->
        <!--<property name="url" value="${jdbc.url2}" />-->
        <!--<property name="username" value="${jdbc.username}" />-->
        <!--<property name="password" value="${jdbc.password}" />-->

        <!--&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
        <!--<property name="initialSize" value="${druid.pool.size.init}" />-->
        <!--<property name="minIdle" value="${druid.pool.size.min}" />-->
        <!--<property name="maxActive" value="${druid.pool.size.max}" />-->

        <!--&lt;!&ndash; 配置监控统计拦截的filters，wall用于防止sql注入，stat用于统计分析 &ndash;&gt;-->
        <!--<property name="filters" value="wall,stat" />-->
    <!--</bean>-->

    <!--<bean id="dataSource" class="com.yingjun.ssm.db.DynamicDataSource">-->
        <!--<property name="targetDataSources">-->
            <!--<map key-type="java.lang.String">-->
                <!--&lt;!&ndash; write &ndash;&gt;-->
                <!--<entry key="master" value-ref="masterdataSource"/>-->
                <!--&lt;!&ndash; read &ndash;&gt;-->
                <!--<entry key="slave1" value-ref="slave1dataSource"/>-->
                <!--&lt;!&ndash; read &ndash;&gt;-->
                <!--<entry key="slave2" value-ref="slave2dataSource"/>-->
            <!--</map>-->
        <!--</property>-->
        <!--<property name="defaultTargetDataSource" ref="masterdataSource"/>-->
    <!--</bean>-->
    
    <!--3、配置SqlSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSource"/>
        <!--<property name="dataSource" ref="dataSource"/>-->
        <!--配置mybatis全局配置文件:mybatis-config.xml-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--扫描entity包,使用别名,多个用;隔开-->
        <property name="typeAliasesPackage" value="com.yingjun.ssm.entity; com.yingjun.ssm.dto"/>
        <!--扫描sql配置文件:mapper需要的xml文件-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!--4、配置扫描Dao接口包,动态实现DAO接口,注入到spring容器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入SqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描的Dao接口-->
        <property name="basePackage" value="com.yingjun.ssm.dao"/>
    </bean>

</beans>
